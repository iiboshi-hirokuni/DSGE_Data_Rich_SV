/* This library contains the following procedures
**
** proc(4) = evaldsge(para,msel,YY)
**
*/

/* Global variables
*/
declare matrix _FIX1, _FIX2;

proc (4) = evaldsge_dr(para,msel,YY, HH, psi);
/* This procedure evaluates the likelihood function of the 
** monetary DSGE model
** retcode = -1 : non existence                
**         = 0  : existence and uniqueness     
**         = 1  : existence and non-uniqueness
*/
local npara, para1, para2, nobs, loglh, loglhzero, retcode,
      obsmean, obsvar, nstate, nseries, ystar,shock, shock_t,
      T1,TC,TEPS,TETA,RC,
      TT, RR, DD, ZZ, QQ, VV, 
      t, At, Pt, At1, Pt1, Phat, yhat, nu, Ft, alphahat, kentry;

/* Parameters
**  h,  sigma_c, sigma_L, beta, phi, tau, Rk, gam_p, 
**  gam_w, psi_p, psi_w, alpha, psi, k_y, g_y,
**  rho_m, mu_pi, mu_y
**  e_c, e_inv, e_q, e_L, e_w, e_z, e_p, e_g, e_m
*/

ystar = YY[2:rows(YY),.]- psi'.*YY[1:rows(YY)-1,.];

npara   = rows(para);
retcode = 0;

nobs     = rows(Ystar);
nseries  = cols(YY);
shock     = zeros(nobs,nshock);
obsmean   = zeros(nobs,nseries);
obsvar    = zeros(nobs,nseries);
loglh     = 0;
loglhzero = -1E8;

/* solve the DSGE model
*/
{T1,TC,TEPS,RC} = dsgesolv(para);
DD = zeros(5,1);
nstate = 2*cols(T1);

if (RC[1] == 1) AND (RC[2]==1);
   /* determinacy */
   retcode[1] = 0;
   TT = T1;
   RR = TEPS;
   
elseif (RC[1] == 1) AND (RC[2]==0) ;
   /* indeterminacy */
   retcode[1] = 1;
   TT = T1;
   RR = TEPS;
   
   loglh = loglhzero;
   goto eofevalsoe;
   
else;
   /* no equilibrium exists, numerical problems */
   retcode[1] = RC[1];
   loglh = loglhzero;
   goto eofevalsoe;

endif;
     
/* create system matrices for state space model
*/



/* These matrices are regime independent
*/
ZZ      = zeros(7,nstate/2);
ZZ[1,1] = 1;               /* output gap */
ZZ[2,2] = 4;               /* inflation */
ZZ[3,3] = 1;               /* wage */
ZZ[4,6] = 1;               /* investment */            
ZZ[5,7] = 1;               /*  consumption */
ZZ[6,8] = 4;               /*  nominal rate  */
ZZ[7,10] = 1;              /*  labor */   

DD      = zeros(7,1);      

QQ = createcov(para[19:27,1]);
VV = zeros(9,7);

TT = T1~zeros(nstate/2,nstate/2)|
     eye(nstate/2)~zeros(nstate/2,nstate/2);
RR = TEPS|zeros(nstate/2,9);
ZZ = ZZ~(-1)*psi.*ZZ;

/* Check whether covariance matrix QQ is positive definite
*/

if sumc(eig(QQ).LE0) > 0;
   loglh = loglhzero;
   goto eofevalsoe;
endif;

/* Verify that I - TT.*.TT is invertible  
*/
/*
trap 1;
if  scalerr(inv(eye(nstate^2) - (TT.*.TT)) ) NE 0 ;
    loglh = -1E20;
    goto eofevalsoe;
endif;
trap 0;
*/

/* We can now define the initial mean and variance for the state vector
*/
At = zeros(nstate,1);
at[1]=yy[1,1]; at[2]=yy[1,2]/4; at[3]=yy[1,3]; 
at[6]=yy[1,4];    
at[7]=yy[1,5]; at[8]=yy[1,6]/4; 
at[10]= yy[1,7]; 
at[22]=yy[1,1]; at[23]=yy[1,2]/4; at[24]=yy[1,3]; 
at[27]=yy[1,4];    
at[28]=yy[1,5]; at[29]=yy[1,6]/4; 
at[31]= yy[1,7]; 

/*
Pt = reshape(inv(eye(nstate^2) - (TT.*.TT))*vec(RR*QQ*RR'),nstate,nstate);
Pt = symmat(Pt);
*/
Pt = dlyap(TT,RR*QQ*RR');
/* compute likelihood with Kalman filter
*/

t = 1;
do until t > nobs;

   At1 = At;
   Pt1 = Pt;

   /* Forecasting
   */
   alphahat = TT*At1;
   Phat = TT*Pt1*TT' + RR*QQ*RR';
   yhat = ZZ*alphahat + DD;
   nu   = Ystar[t,.] - yhat';
   
   Ft   = ZZ*Phat*ZZ' + HH + ZZ*RR*VV + (ZZ*RR*VV)';
   Ft   = 0.5*(Ft + Ft');
   
   loglh = loglh -0.5*cols(YY)*ln(2*pi) 
           - 0.5*ln(det(Ft)) - 0.5*nu*inv(Ft)*nu';

   /* Updating
   */
   At = alphahat + (Phat*ZZ' + RR*VV)*inv(Ft)*nu';
   Pt = Phat - (Phat*ZZ'+RR*VV)*inv(Ft)*(Phat*ZZ'+RR*VV)';

   
   obsmean[t,.] = (ZZ[.,1:21]*alphahat[1:21])';
   obsvar[t,.]  = diag(Ft)';

    
   t = t+1;
endo;  

eofevalsoe:   
retp(real(loglh),retcode,obsmean,obsvar);
endp;

/*************************************************************************/
proc(1) = createcov(para);
local omega,
      sig_r,sig_q,sig_a,sig_yst,sig_pist, sig_6,
      sig_7, sig_8, sig_9;

sig_r   = para[1];
sig_q   = para[2];
sig_a   = para[3];
sig_yst = para[6];
sig_pist = para[7];
sig_6   = para[4];
sig_7   = para[5];
sig_8   = para[8];
sig_9   = para[9];

omega = zeros(9,9);

omega[1,1] = sig_r^2;
omega[2,2] = sig_q^2;
omega[3,3] = sig_a^2;
omega[4,4] = sig_yst^2;
omega[5,5] = sig_pist^2;
omega[6,6] = sig_6^2;
omega[7,7] = sig_7^2;
omega[8,8] = sig_8^2;
omega[9,9] = sig_9^2;

retp(omega);
endp;
